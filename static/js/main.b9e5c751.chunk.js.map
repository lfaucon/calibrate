{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["db","request","IDBsupport","window","indexedDB","open","onerror","event","console","log","onsuccess","target","result","error","errorCode","onupgradeneeded","objectStoreNames","contains","createObjectStore","autoIncrement","Header","_ref","view","setView","react_default","a","createElement","className","onClick","gradient","split","probabilities","filters","FilterList","_ref2","filter","setFilter","map","f","key","ProbaDisplay","_ref3","confidence","proba","style","border","MakeBet","_useState","useState","_useState2","Object","slicedToArray","setConfidence","_useState3","_useState4","setOpen","_useState5","_useState6","updateConfidence","incr","c","addBet","transaction","oncomplete","value","objectStore","add","r","justifyContent","App_FilterList","App_ProbaDisplay","Help","Stats","_useState7","_useState8","_useState9","undefined","_useState10","bets","setBets","getAll","stats","b","reduce","acc","val","_ref4","i","_ref5","Math","round","Introduction","App","_useState11","_useState12","App_Header","App_Introduction","App_MakeBet","App_Help","App_Stats","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b9e5c751.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\n//check for support\nconst IDBsupport = \"indexedDB\" in window;\n\nvar db, request;\nrequest = indexedDB.open(\"data\", 13);\nrequest.onerror = function(event) {\n  console.log(\"Why didn't you allow my web app to use IndexedDB?!\");\n};\nrequest.onsuccess = function(event) {\n  console.log(\"What a success !\");\n  db = event.target.result;\n  db.onerror = function(event) {\n    // Generic error handler for all errors targeted at this database's\n    // requests!\n    console.error(\"Database error: \" + event.target.errorCode);\n  };\n};\n// This event is only implemented in recent browsers\nrequest.onupgradeneeded = function(event) {\n  console.log(\"upgrading\");\n  // Save the IDBDatabase interface\n  var db = event.target.result;\n  // Create an objectStore for this database\n  if (!db.objectStoreNames.contains(\"bets\")) {\n    db.createObjectStore(\"bets\", { autoIncrement: true });\n  }\n};\n\nconst Header = ({ view, setView }) => {\n  return (\n    <div className=\"header\">\n      <div\n        className={\"header-button\" + (view === \"intro\" ? \" selected\" : \"\")}\n        onClick={() => setView(\"intro\")}\n      >\n        <i className=\"fas fa-atom\" />\n      </div>\n      <div\n        className={\"header-button\" + (view === \"bets\" ? \" selected\" : \"\")}\n        onClick={() => setView(\"bets\")}\n      >\n        <i className=\"fas fa-brain\" />\n      </div>\n      <div\n        className={\"header-button\" + (view === \"stats\" ? \" selected\" : \"\")}\n        onClick={() => setView(\"stats\")}\n      >\n        <i className=\"fas fa-chart-bar\" />\n      </div>\n      <div\n        className={\"header-button\" + (view === \"help\" ? \" selected\" : \"\")}\n        onClick={() => setView(\"help\")}\n      >\n        <i className=\"fas fa-question\" />\n      </div>\n      <div\n        className={\"header-button\" + (view === \"settings\" ? \" selected\" : \"\")}\n        onClick={() => setView(\"settings\")}\n      >\n        <i className=\"fas fa-cog\" />\n      </div>\n    </div>\n  );\n};\n\nconst gradient = \"#fff;#eee;#ddd;#ccc;#aaa;#888;#666;#444;#333;#222;#111\".split(\n  \";\"\n);\n\nconst probabilities = [1, 3, 10, 25, 40, 50, 60, 75, 90, 97, 99];\n\nconst filters = [\"Filter1\", \"Filter2\", \"Filter3\", \"Filter4\", \"Filter5\"];\n\nconst FilterList = ({ filter, setFilter }) => {\n  return (\n    <div className=\"filter-list\">\n      <span\n        onClick={() => setFilter(\"All\")}\n        className={\"filter\" + (\"All\" === filter ? \" selected\" : \"\")}\n      >\n        All\n      </span>\n      {filters.map(f => (\n        <span\n          key={f}\n          onClick={() => setFilter(f)}\n          className={\"filter\" + (f === filter ? \" selected\" : \"\")}\n        >\n          {f}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nconst ProbaDisplay = ({ confidence }) => {\n  const proba = probabilities[5 + confidence];\n  return (\n    <div\n      className=\"proba\"\n      style={{ border: \"solid 24px \" + gradient[5 - confidence] }}\n    >\n      <span>{proba}%</span>\n    </div>\n  );\n};\n\nconst MakeBet = () => {\n  const [confidence, setConfidence] = useState(0);\n  const [open, setOpen] = useState(false);\n  const [filter, setFilter] = useState(\"All\");\n\n  const updateConfidence = incr => {\n    const c = confidence + incr;\n    setConfidence(c > 5 ? 5 : c < -5 ? -5 : c);\n  };\n\n  const addBet = result => {\n    var transaction = db.transaction([\"bets\"], \"readwrite\");\n    transaction.oncomplete = function(event) {\n      console.log(\"All done!\");\n    };\n\n    transaction.onerror = function(event) {\n      console.log(\"ERROR\");\n      console.log(event.target.value);\n    };\n\n    var objectStore = transaction.objectStore(\"bets\");\n    var request = objectStore.add({ c: confidence, f: filter, r: result });\n    request.onsuccess = function(event) {\n      console.log(\"request success\");\n      console.log(event.target.result);\n    };\n    setOpen(false);\n  };\n\n  return (\n    <div className=\"container\" style={{ justifyContent: \"space-between\" }}>\n      <FilterList filter={filter} setFilter={setFilter} />\n      <ProbaDisplay confidence={confidence} />\n      {!open && (\n        <div className=\"confidence-control-container\">\n          <i\n            className=\"fas fa-minus-square confidence-control\"\n            onClick={() => updateConfidence(-1)}\n          />\n          <i\n            className=\"fas fa-check-square confidence-control\"\n            onClick={() => setOpen(true)}\n          />\n          <i\n            className=\"fas fa-plus-square confidence-control\"\n            onClick={() => updateConfidence(1)}\n          />\n        </div>\n      )}\n      {open && (\n        <div className=\"confidence-control-container\">\n          <i\n            className=\"fas fa-times-circle confidence-control\"\n            onClick={() => addBet(false)}\n          />\n          <i\n            className=\"fas fa-chevron-circle-left confidence-control\"\n            onClick={() => setOpen(false)}\n          />\n          <i\n            className=\"fas fa-check-circle confidence-control\"\n            onClick={() => addBet(true)}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst Help = () => {\n  return (\n    <div className=\"container\">\n      <span>For help, please contact lpfaucon@gmail.com</span>\n    </div>\n  );\n};\n\nconst Stats = () => {\n  const [filter, setFilter] = useState(\"All\");\n  const [bets, setBets] = useState(undefined);\n\n  var objectStore = db.transaction(\"bets\").objectStore(\"bets\");\n  if (bets === undefined) {\n    objectStore.getAll().onsuccess = event => {\n      console.log(\"Got all bets\");\n      setBets(event.target.result);\n    };\n    return <p>Loading . . .</p>;\n  }\n\n  const stats = bets\n    .filter(b => b.f === filter || filter === \"All\")\n    .reduce((acc, val) => {\n      acc[val.c + 5][0] += val.r ? 1 : 0;\n      acc[val.c + 5][1] += 1;\n      return acc;\n    }, probabilities.map(() => [0, 0]));\n\n  return (\n    <div className=\"container\">\n      <FilterList filter={filter} setFilter={setFilter} />\n      <table>\n        <tbody>\n          <tr>\n            <th>Category</th>\n            <th>Result</th>\n            <th>Count</th>\n          </tr>\n          {stats.map(([a, c], i) => {\n            return c === 0 ? null : (\n              <tr key={i}>\n                <td>{probabilities[i]}%</td>\n                <td>{Math.round((100 * a) / c)}%</td>\n                <td>{c}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst Introduction = () => (\n  <div className=\"container\">\n    <h2>The world isn't black & white</h2>\n    <p>\n      When trying to build knowledge about the world ... true or false, one\n      quickly comes to realize that white or black answers are not satisfying in\n      all cases. ...... grey .... one colour.... really light grey ... the sun\n      will rise tomorrow ....{\" \"}\n    </p>\n    <h2>Giving probabilities to everything ?</h2>\n    <p>Of course yes, there is no other way to do it.</p>\n    <h2>Calibrating your belief ?</h2>\n    <p>Events to which you assign 90% probability should .....</p>\n    <h2>This application</h2>\n    <p>\n      This application is very minimalistic. Using it you will be able to log\n      bets.... score for your probability judgments... You will then be able to\n      see statistics about your calibration. ....{\" \"}\n    </p>\n  </div>\n);\n\nconst App = () => {\n  if (!IDBsupport)\n    return <p>Your browser is not supported, please try another one</p>;\n\n  const [view, setView] = useState(\"bets\");\n\n  return (\n    <div className=\"App\">\n      <Header setView={setView} view={view} />\n      {view === \"intro\" && <Introduction />}\n      {view === \"bets\" && <MakeBet />}\n      {view === \"help\" && <Help />}\n      {view === \"stats\" && <Stats />}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}